import {React, useState} from "react";
import dropArrow from '/drop.png'

const ReadMe = () => {

    const [showDropdown, setShowDropdown] = useState(false);

    const toggleDropdown = () => {
        setShowDropdown(!showDropdown);
    };

    return(
        <div className="readme-section">
            <h1>Scrapetron</h1>

            <div onClick={toggleDropdown} 
                className={`dropdown-header how-to ${showDropdown ? 'active' : ''}`}>

                <i class="fa-solid fa-angle-right"></i>

                <h3>
                    How to use
                </h3>
            </div>
            
            <div className={`dropdown-content ${showDropdown ? 'visible' : ''}`}>
                <div className="TLDR">
                    <p>TL;DR</p>
                    <ol>
                        <li>Run every js script that begins with <code>"scraper-"</code> inside the <code>dataMngmnt</code> folder</li>
                        <li>Run <code>1-join-data.js</code></li>
                        <li>Run <code>2-data-cleaner.js </code>with your own keys</li>
                        <li>Run <code>3-data-grouper.js</code></li>
                        <li>Run <code>4-data-verifier.js</code></li>
                        <li>Style the css to match your website's branding, size, etc.</li>
                    </ol>
                </div>
                <div className="notes">
                <p>Notes before we start:</p>
                    <ul>
                        <li>This is not a webpage, the html that contains the brands and their products should go embedded in your website</li>
                        <li>Make sure to make all the necessary style changes in the App.css file at src/front-end/css/App.css</li>
                        <li>The products lists need to be updated on your local machine so the prices you see on the product cards vs. the actual prices in their store links may differ by the time you're reading this</li>
                    </ul>
                </div>
                <div className="instructions">
                    <ol>
                        <li>
                            Locate the <code>dataMngmnt</code> folder inside the <code>src</code> folder <br />-Any file inside that folder that begins with the word "scraper" is going to be followed by the name of the store that it scrapes<br />-You can always change the paremeters accordingly to the store and info of your liking
                        </li>
                        <li>
                            Choose the scripts you want and run them to create a <code>.json</code> file that will contain the scraped data
                        </li>
                        <li>
                            Once you have all of your raw data you are ready to start processing it. First, run <code>1-join-data.js</code> to create the <code>all-data.json</code>file. This will contain ALL of our raw data,you can check it out in the repo right now, pretty overwhelming right?
                        </li>
                        <li>
                            Now, time to make it make sense, locate <code>2-data-cleaner.js</code> and run it. This will use OpenAI's API to "cookie-cut" the data so we can handle all of it with the same scrpts. <br />-Remember to set the API's config <code>'YOUR_ORG_ID'</code>and <code>'YOUR_API_KEY'</code> to your actual keys. <br />-Tokens used/generated by the API have a cost, in this version we are using gpt-3.5-turbo which will set you back around ~$1.50 usd for every 300 products
                        </li>
                        <li>
                            Congrats! Now go and check out your <code>cleanedData.json</code> file, beautiful isn't it? Now, to find the best products across multiple stores we have to find a common denominator to them: The brand. Locate <code>3-data-grouper.js</code> and run it. That's it, now you have your <code>groupedData.json</code> file. <br />-This will ensure that the data is ordered by brand<br />-It handles cases where the brand name is written differently across stores<br />-It generates an unique ID for each product<br />-It filters out brands with less than 4 products and less than 2 stores carrying it <br />-It sorts the brands based on the number of products they carry. 
                        </li>
                        <li>
                            That was a lot of work! And even though our <code>groupedData.json</code> file looks nice and tidy, if we try to use this data, we will run into a problem when feeding it to our components. If we pass the information "as is", we will end up with individual products that may or may not be the same, making it super difficult for the end-user to analyze, we have to identify the products that are the same across different stores based on the brand. Since we already have the products grouped by brand, its only a matter of applying some regular expressions to check if the <code>productNames</code> under a certain <code>brandName</code> match right?...right?. Turns out that is way harder than what it sounds like! Product names vary a whole lot between stores, making it almost impossible to write a simple script to group them together, so we will have to try a different approach. Locate and run <code>4-data-verifier.js</code>. This script uses the Levenshtein distance algorithm to measure the difference between two <code>productName</code> variables and groups them together so the user can easily compare prices and choose the best option. Finally, it creates the final data-set on which we'll base our front end, locate it at <code>final-data.json</code><br /> Voila! We add some simple JSX components to this bad boy and there you have it, some super useful html for you to embed on your website to ensure massive amounts of traffic to it. Happy coding!
                        </li>
                    </ol>
                </div>
            </ div>
        </div>
    )
};

export default ReadMe